/*! \page uguide Users Guide

Througout this manual we assume that every source snippet has somewhere


\code{.cpp}
#include<h5++/h5++.hpp>

namespace h5 = h5cpp;
\endcode

included.


\section ug_files Managing files

\code{.cpp}
//creating a new file
h5::file f1 = h5::file::create("name.h5",....);

//opening an existing file
h5::file f2 = h5::file::open("name.h5",....);
\endcode

Unlike in the C-API an instance of ``h5::file`` is not a valid parent object.
For this purpose one has get the root group of the file with 

\code{.cpp}

h5::group root_group = f.root();
\endcode


    
\section Working with groups

\code{.cpp}

h5::group g = root_group.create("new_group",....);
\endcode

Need to find a good way how to handle group creation property lists. 

Groups should provide a STL compliant iterator interface 

\code{.cpp}
std::vector<h5::dataset> datasets; 
h5::group g = ....;

std::copy_if(g.begin(),g.end(),std::back_inserter(datasets),
             [](const auto &o) { return h5::is_dataset(o); });
\endcode


//hello
\section Datasets

\subsection Reading and writing data

\subsection Dataset container adapter

\code{.cpp}

using value_type = std::vector<double>;
using adapter_type = h5::container_type<value_type>;

h5::dataset d = group["detector_data"];

//container adapter for dataset d along the first dimension
adapter_type frames(d,0);

for(auto frame: frames)
{
    //process the frame
}

\endcode

\section Attributes



*/


